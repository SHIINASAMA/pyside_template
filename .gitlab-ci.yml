stages:
  - build
  - upload
  - deploy

variables:
  PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/App/${CI_COMMIT_TAG}"

.build:
  stage: build
  script:
    - pip install uv
    - uv sync
    - uv run build.py --all --onedir
    - mv ./build/App ./Package
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - app/**
        - pyproject.toml
        - uv.lock
        - build.py
        - .gitlab-ci.yml
  artifacts:
    name: "build-${CI_COMMIT_SHA}"
    paths:
      - Package_*
    expire_in: 3 days

build_amd64_windows:
    extends: .build
    tags:
      - windows
    after_script:
      - Compress-Archive -Path .\Package\ -DestinationPath .\Package_amd64_windows.zip -CompressionLevel Optimal

build_amd64_linux:
    extends: .build
    image: python:3.11.13
    after_script:
      - tar -czf Package_amd64_linux.tar.gz Package/

upload:
  stage: upload
  image: curlimages/curl:latest
  needs:
    - job: build_amd64_windows
      artifacts: true
    - job: build_amd64_linux
      artifacts: true
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - 'curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file Package_amd64_windows.zip ${PACKAGE_REGISTRY_URL}/Package_amd64_windows.zip'
    - 'curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file Package_amd64_linux.tar.gz ${PACKAGE_REGISTRY_URL}/Package_amd64_linux.tar.gz'

release:
  stage: deploy
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - job: upload
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - 'true'
  release:
    name: 'Release $CI_COMMIT_TAG'
    tag_name: '$CI_COMMIT_TAG'
    description: 'Auto Release by GitLab Pipeline.'
    assets:
      links:
        - name: 'Package_amd64_windows'
          url: '${PACKAGE_REGISTRY_URL}/Package_amd64_windows.zip'
        - name: 'Package_amd64_linux'
          url: '${PACKAGE_REGISTRY_URL}/Package_amd64_linux.tar.gz'
