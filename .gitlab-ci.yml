stages:
  - validate
  - build
  - deploy

variables:
  PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/App/${CI_COMMIT_TAG}"

check_version:
  stage: validate
  image: reg.mikumikumi.xyz/mirror/alpine:latest
  rules:
    - if: $CI_COMMIT_TAG
  before_script:
    - apk add --no-cache bash
  script:
    - |
      bash -eo pipefail <<'EOF'
      if [[ ! "$CI_COMMIT_TAG" =~ ^([0-9]+(\.[0-9]+){1,3})(-(stable|alpha|beta|nightly|dev))?$ ]]; then
        echo "❌ Tag format invalid!"
        exit 1
      fi
      echo "✅ Tag format OK"
      EOF


.build:
  stage: build
  script:
    - pip install uv
    - uv sync
    - uv run build.py --all --onedir
    - mv ./build/App ./Package
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - app/**
        - pyproject.toml
        - uv.lock
        - build.py
        - .gitlab-ci.yml
  artifacts:
    name: "build-${CI_COMMIT_SHA}"
    paths:
      - ./release/Package_*
    expire_in: 3 days

build_amd64_windows:
  extends: .build
  tags:
    - windows
  after_script:
    - New-Item -Path release -Type Directory
    - Compress-Archive -Path .\Package\ -DestinationPath .\release\Package_amd64_windows.zip -CompressionLevel Optimal

build_amd64_linux:
  extends: .build
  image: reg.mikumikumi.xyz/mirror/python:3.11.13
  before_script:
    - apt-get update
    - apt-get install -y patchelf
  after_script:
    - mkdir release
    - tar -czf .\release\Package_amd64_linux.tar.gz Package/

release:
  stage: deploy
  image: reg.mikumikumi.xyz/mirror/glab:latest
  needs:
    - job: build_amd64_windows
      artifacts: true
    - job: build_amd64_linux
      artifacts: true
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - glab auth login --job-token $CI_JOB_TOKEN --hostname $CI_SERVER_HOST --api-protocol $CI_SERVER_PROTOCOL
    - GITLAB_HOST=$CI_SERVER_URL
    - >-
      glab release create $CI_COMMIT_TAG -N "Release ${CI_COMMIT_TAG}" -F CHANGE.md ./release/*

